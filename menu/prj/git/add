#!/bin/bash
# ------------------------------------------------------------------------
#
# Copyright (c) 2014 by Simon Arjuna Erat (sea)  <erat.simon@gmail.com>
# All rights reserved.
#
# This program is free software: you can redistribute it and/or modify it
# under the terms of the GNU Lesser General Public License as published
# by the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>
#
# ------------------------------------------------------------------------
#
#	
	script_version=0.6
#
#	Title
#
	title="$OA_TITLE - GIT Handler - Add repositry"
	tui-title "$title ($script_version)"
	[[ -f "$CONF_GIT" ]] || \
		(tui-wait 5s "Please take care to provide all required data...";ds setup)
	source "$CONF_GIT" || ds setup
#
#	Variables
#
	if [[ -z "$4" ]] # || [[ ! -z "$LBL" ]]
	then	if [[ -d "$DIR_CFG/$1" ]]
		then	LBL="$1"
		else	tui-echo "Please select the label to work with:"
			select LBL in $(cd "$DIR_CFG";ls|grep -v \.);do break;done
		fi
	else	LBL="$4"
	fi
	[[ -f "$CONF_GIT" ]] && source "$CONF_GIT"
	source "$DIR_CFG/$LBL/$LBL.conf"
	tConf="$DIR_CFG/$LBL/git.conf"
	
	. /etc/tui/apps.conf
	REQ_ADD=false
	remoteOnly=false
	README="$prj_name
======

Example Readme
-----

*one*

**two**

***three***


	Quote/code
	text

  [*] list
  [*] list
  [*] list
  [*] list

	
"
#
#	Display
#
	prj_git=""
	if tui-yesno "Is this a regular $GIT_ID project?"
	then	tui-echo "What is the according GIT project name?"
		prj_git=$(tui-read "Leave empty for: '$prj_name'")
		[[ -z "$prj_git" ]] && prj_git="$prj_name"
		tui-conf-set "$tConf" prj_git "$prj_git"
		. "$tConf"
		
		case $GIT_ID in
		GitHub)		URL="\$GIT_URL/\$GIT_USER/\$prj_git.git"	;;
		SourcceForge)	URL="$GIT_URL/p/$prj_git/code"			;;
		*)		tui-echo "Unkown host, leave empty for 'default':"
				template="\$GIT_URL/\$GIT_USER/\$prj_git"
				tui-echo "$template" "$(eval $template)"
				use=$(tui-read "What is the full URL:")
				[[ -z "$use" ]] && \
					URL="$template" || \
					URL="$use"
		esac
	else	URL=$(tui-read "What is the full URL to the git repositry?")
	fi
	tui-conf-set "$tConf" URL "\"$URL\""
	[[ -z "$URL_NEW" ]] || tui-conf-set "$tConf" URL_NEW "\"$URL_NEW\""
	
#
#	Initialize or use local git repositry
#	
	cd "$prj_path"
	if $remoteOnly
	then	msg="Its remote only, nothing to do..."
		RET=4
	else	if [[ -d .git ]]
		then	msg="There is already a git repositry."
			RET=4
		else	tui-echo "Preparing first git action"
			if [[ "" = "$(which ls)" ]]
			then	tui-echo "The project dir \"$prj_path\" is empty."
				if tui-yesno "Does the project exist on $GIT_ID already?"
				then	cd ..
					git clone "$URL" "$prj_path" > /dev/zero
					RET=$?
					msg="Downloaded repositry from \"$URL\""
					cd "$prj_path"
				else	# Same as 'non-empty' else....
					git init . > /dev/zero
					RET=$?
					git add . > /dev/zero
					git commit -m "Init repositry" > /dev/zero
					msg="Created GIT repositry for $prj_name"
				fi
			else	# Same as 'project-not-remote' else
				git init . > /dev/zero
				RET=$?
				git add . > /dev/zero
				git commit -m "Init repositry" > /dev/zero
				msg="Created GIT repositry for $prj_name"
			fi
		fi
	fi
	tui-status $RET "$msg"
	
	if $REQ_ADD || ! grep origin "$prj_path/.git/config"
	then	#echo "$BROWSER -- $BROWSER_GUI -- $URL -- $URL2"
		[[ ! -z "$URL2" ]] && $BROWSER_GUI "$URL2"
		[[ ! -z "$URL" ]] && \
		cat >> "$prj_path/.git/config" << EOF
[remote "origin"]
	url = $URL
	fetch = +refs/heads/*:refs/remotes/origin/*
[branch "master"]
	remote = origin
	merge = refs/heads/master
EOF
	fi
	
	exit $RET
