#!/usr/bin/env bash
# ------------------------------------------------------------------------
#
# Copyright (c) 2014-2015 by Simon Arjuna Erat (sea)  <erat.simon@gmail.com>
# All rights reserved.
#
# This program is free software: you can redistribute it and/or modify it
# under the terms of the GNU Lesser General Public License as published
# by the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>
#
# ------------------------------------------------------------------------
#
#	
	. $HOME/.config/dev-scripts/dev-scripts.conf
	. /usr/share/dev-scripts/*
	
	script_version=0.2
#
#	Title
#
	title="$OA_TITLE - GIT Handler - Upload repositry"
	tui-title "$title ($script_version)"
	[ -f "$CONF_GIT" ] || \
		(tui-wait 5s "Please take care to provide all required data...";ds setup)
	source "$CONF_GIT" || exit 1
#
#	Variables
#
	if [ -z "$4" ]
	then	if [ -d "$DIR_CFG/$1" ]
		then	LBL="$1"
		else	tui-echo "Please select the label to work with:"
			select LBL in $(cd "$DIR_CFG";ls|grep -v \.);do break;done
		fi
	else	LBL="$4"
	fi
	source "$DIR_CFG/$LBL/$LBL.conf"
	tui-status $? "Selected project $prj_name ($LBL)"
#
#	Display & Action
#
	cd "$prj_path"
	LC_ALL=C ; export LC_ALL
	
	# Generate parsing string, and prepare parsing toggle
	git_status="$(git status)"
	mode=fail
	
	# Find reasons to make it pass
	# Or should it be, find reasons to make it fail???
	case "$git_status" in
	*ahead*)	mode=pass	;;
	esac
	
	# Add files? Delete leftovers? Commit changes? 
	if [ fail = "$mode" ]
	then	tui-status 1 "There are things to do..."
		git status
		tui-yesno "Handle with dev-scripts?" && \
			ds prj git status $LBL || \
			exit $?
	fi
	
	tui-echo "Uploading data for $prj_name"
	git push origin master
	tui-status $? "Uploaded code of $prj_name"
	ret=$?
	cd "$oPWD"
	exit $ret

exit 0
	if [ ! "" = "$(git status|grep ahead )" ]
	then	tui-echo "Uploading data for $prj_name"
		git push origin master
		tui-status $? "Uploaded code of $prj_name"
		cd "$oPWD"
		exit $?
	else	tui-status $? "There are uncommited changes"
		git status
		tui-yesno "Handle with dev-scripts?" && \
			ds prj git status $LBL
		exit $?
	fi
