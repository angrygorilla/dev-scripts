#!/bin/bash
# ------------------------------------------------------------------------
#
# Copyright (c) 2014-2015 by Simon Arjuna Erat (sea)  <erat.simon@gmail.com>
# All rights reserved.
#
# This program is free software: you can redistribute it and/or modify it
# under the terms of the GNU Lesser General Public License as published
# by the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>
#
# ------------------------------------------------------------------------
#
#	
	source "$HOME/.tui_rc" || . tui
	for f in $TUI_FILE_{CONF,USER}_{APPS,COMMANDS,COLORS,SETTINGS,STATUS,SYSTEM}
	do	[ -f "$f" ] && source "$f"
	done
	script_version=0.8.1
#
#	Title
#
	title="$OA_TITLE - Kickstart - Make an iso image"
	tui-title "$title ($script_version)"
#
#	Variables
#
	LOG="$LOG_LIVECD" ; touch "$LOG"
	NONVERBOSE="--quiet"
	beVerbose=false
	ov=false
	oPWD=$(pwd)
	do32bit=false
	
	case $# in
	5)	shift 2 ;;
	esac
	
	NONVERBOSE="--quiet --logfile=$LOG"
	while getopts "v36h" opts
	do 	case $opts in
		3)	do32bit=true	; ov=true ;;
		6)	do32bit=false	; ov=true ;;
		v)	beVerbose=true
			NONVERBOSE=""
			;;
		esac
	done
	shift $(($OPTIND - 1))
	
	if [ -z "$4" ] # || [[ ! -z "$LBL" ]]
	then	if [ -d "$DIR_CFG/$1" ]
		then	LBL="$1"
		else	tui-echo "Please select the label to work with:"
			select LBL in $(cd "$DIR_CFG";ls|grep -v \.);do break;done
		fi
	else	LBL="$4"
	fi
	source "$DIR_CFG/$LBL/$LBL.conf"
	source "$DIR_BASE/livecd.conf"
	source "$DIR_CFG/$LBL/livecd.conf"

	# Exit if no kickstart file was found
	[ -f "$kickstart" ] ; tui-status $? "$kickstart exists" || exit 1
	
	# Create STRING according to ARCH
	[ -z "$arch_style" ] && \
		arch_style=kernel && \
		tui-conf-set "$DIR_CFG/$LBL/livecd.conf" arch_style $arch_style
	# O_verwrite V_ariable arch
	if $ov
	then	# User wants specific ARCH
		$do32bit_ov && \
			ARCH=32 || \
			ARCH=64
		do32bit=$do32bit_ov
	else	# Dynamicly reckognize which ARCH
		# Depeing on preset
		if $do32bit
		then	ARCH=32
		else	uname -m | grep -q 64  && \
				ARCH=64 || \
				ARCH=32
		fi
	fi

	tui-status 111 "Building \"$prj_label\" as $ARCH bit iso."
	
	# Automaticly generate identifier string as defined the the projects livecd.conf
	case $arch_style in
	number)		ARCH=${ARCH}bit	;;
	kernel)		str="$(uname -r)"
			if [ x86_64 = $(uname -m) ] && $do32bit
			then	str=${str/$(uname -m)/i686}
			fi
			# Remove fc$RELEASEVER
			ARCH="${str/.fc[1-9][0-9]/}"
			;;
	esac
	
	# Append the string to the label and title
	prj_label+="_${ARCH}"
	prj_title+=" (${ARCH})"
	# Generate the tempdir string
	[ -z "$prj_tempdir" ] && \
		prj_tempdir="/mnt/tmp/${prj_label}"
	cmd_tmpdir="--tmpdir=\"$prj_tempdir/$prj_label\""
	# Prepare 'while & post' build actions
	cmd_post="chown $USER:$USER ${prj_label}.iso"
	$do32bit && \
		PRE="setarch linux32" || \
		PRE=""
	$beVerbose && \
		verboseString="" || \
		verboseString=" 2>>\"$LOG\" 1>>$LOG"
	# Change to project path, so relative paths work
	cd "$prj_path"
	echo "tui-bol-dir -v \"$prj_tempdir\" ; $PRE livecd-creator $NONVERBOSE -c \"$kickstart\" -t \"$prj_title\" -f \"$prj_label\" --releasever=$prj_release $cmd_tmpdir $verboseString && $cmd_post ; RET=\$? ; export RET" > "$TUI_FILE_TEMP"
#
#	Display
#
	optVerb=""
	RET=1
	if $beVerbose
	then	cmd=$(cat "$TUI_FILE_TEMP")
		tui-echo "Executing:" "$cmd"
		tui-asroot $SHELL "$TUI_FILE_TEMP" && \
			RET=0 || RET=1
		optVerb="-v"
	else	printf "Command:\t" >> "$LOG"
		cat "$TUI_FILE_TEMP" >> "$LOG"
		#cat "$TUI_FILE_TEMP"
		tui-asroot tui-bgjob "$TUI_FILE_TEMP" "Building $prj_name ($prj_label.iso) live image...   (~30-60m)" "Built $prj_path/$prj_label.iso" && \
			RET=0 || RET=1
		pwd
		$LS | $GREP  iso$ 
	fi
#	
#	Post build tasks
#
	if [ 0 -eq $RET ] && [ -f "$prj_path/${prj_label}.iso" ]
	then	# Its already been chown'ed
		tui-log $optVerb -t "$LOG" "Build was successfull"
		tui-bol-dir "$prj_outpath/" 1>/dev/zero 2>/dev/zero && \
			msg="$prj_outpath exists." || \
			msg="$prj_outpath does NOT exist."
		tui-log $optVerb -t "$LOG" "$msg"
		
		if [ -f "$prj_path/${prj_label}.iso" ]
		then	tui-log $optVerb -t "$LOG" "Found: $PWD/${prj_label}.iso"
			target="$prj_outpath/${prj_label}.iso"
			if tui-cp "$prj_path/${prj_label}.iso" "$target" 
			then 	tui-log $optVerb -t "$LOG" "Successfully moved to $target"
				RET=0
			else	tui-log $optVerb -t "$LOG" "Failed to move to $target"
				RET=1
			fi
			tui-status $RET "Moved to $prj_outpath/" "$prj_label.iso"
		fi
	else	[ false = $beVerbose ] && tui-yesno "Do you want to see the $LOG for details?" && tui-edit "$LOG"
	fi

	# Clean up temporary data, specialy if it failed....
	if [ ! -z "$prj_tempdir" ] 
	then 	# If 'livecd_remove_tempdir' is found and is true,
		# automaticly remove the temp files, otherwise
		# ask the user wether to delete the tempfiles or not.
		if ! ${livecd_remove_tempdir:-false} || tui-yesno "Delete all files in $$prj_tempdir?"
		then	# Since forced recursive deleting is dangerous, make a failsafe catcher
			# Of course this still requires that the user doesnt set $HOME as prj_tempdir...
			cd "${prj_tempdir:-notfoundanythingitsempty}" || exit $RET
			tui-log $optVerb -t "$LOG" "Changed to: $prj_tempdir"
			echo "rm -fr \* ; RET2=\$? ; export RET2" > "$TUI_FILE_TEMP"
			tui-log $optVerb -t "$LOG" "Removing all files in: $prj_tempdir"
			tui-asroot $SHELL "$TUI_FILE_TEMP"
			tui-status $? "Removed tempdirectories: $prj_tempdir"
		fi
	fi
	cd "$oPWD"
	exit $RET