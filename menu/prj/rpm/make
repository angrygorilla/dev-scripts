#!/bin/bash
# ------------------------------------------------------------------------
#
# Copyright (c) 2014 by Simon Arjuna Erat (sea)  <erat.simon@gmail.com>
# All rights reserved.
#
# This program is free software: you can redistribute it and/or modify it
# under the terms of the GNU Lesser General Public License as published
# by the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>
#
# ------------------------------------------------------------------------
#
#	
	source /etc/tui/tui.conf
	
	script_version=0.4
#
#	Title
#
	title="$OA_TITLE - RPM Handler - Build package"
	tui-title "$title ($script_version)"
#
#	Variables
#
	case $# in
	5)	shift 3 ;;
	esac
	
	beVerbose=false
	NONVERBOSE="--quiet"
	while getopts "v" opts
	do 	case $opts in
		v)	beVerbose=true
			NONVERBOSE=""
			;;
		esac
	done
	shift $(($OPTIND - 1))
	
	if [[ -z "$4" ]] # || [[ ! -z "$LBL" ]]
	then	if [[ -d "$DIR_CFG/$1" ]]
		then	LBL="$1"
		else	tui-echo "Please select the label to work with:"
			select LBL in $(cd "$DIR_CFG";ls|grep -v \.);do break;done
		fi
	else	LBL="$4"
	fi
	[[ -z $TUI_LOG ]] && source tui || echo $TUI_LOG
	source "$CONF_RPM"
	source "$DIR_CFG/$LBL/$LBL.conf"
	source "$DIR_CFG/$LBL/rpm.conf"
	touch "$TUI_TEMP_FILE"
	OPTS="-$opt"
	if [[ -z "" ]]
	then	specfile="$prj_path/$prj_name.spec"
		[[ -f "$specfile" ]] || specfile=$(tui-read "Please type the full path to the specfile:")
		
		# Save for later use
		if [[ -f "$specfile" ]]
		then	tui-conf-set "$DIR_CFG/$LBL/rpm.conf" specfile "$specfile"
		else	tui-status 1 "Cant work without a specfile!"
			exit $?
		fi
	fi
	VER=$(grep Version "$specfile"|awk '{print $2}')
	TARBALL="$prj_name-$VER.$TAR_EXT"
	DEST="$rpm_builddir"
	[[ -z "$rpm_cleandir" ]] && rpm_cleandir=true
#
#	Functions
#
	increase_release() { #
	# Automaticly updates the release (build) number
	#
		rel=$(grep -i "release:" "$specfile"|awk '{print $2}')
		num=${rel/\%*/}
		other=${rel/*\%/}
		num=$((num+1))
		sed s,"$rel","$num%$other",g -i "$specfile"
		return $?
	}
#
#	Display
#
	if $rpm_cleandir
	then	rpmdev-wipetree 2>&1 1>/dev/zero
		tui-status $? "Cleaned $rpm_builddir"
	fi
	[[ -d "$rpm_builddir" ]] || rpmdev-setuptree
	ln -sf "$specfile" "$DEST/SPECS/${specfile##*/}"
	
	
	if $remoteOnly
	then	# Create temporary home dir...
		cd $prj_path
		if [[ ! "" = "$(ls *patch)" ]]
		then	# Copy patches to sources dir
			cp *patch $rpm_builddir/SOURCES/
		fi
		prj_path+="/$prj_name"
		[[ -d "$prj_path" ]] && \
			tui-yesno "Do you want a fresh download?" && \
			rm -fr "$prj_path" && \
			new=true || \
			new=false
		mkdir -p "$prj_path"
		cd "$prj_path"
		
		if $new
		then	case "${downloadMode:0:3}" in
			git)	URL=""
				source "$CONF_GIT"
				source "$DIR_CFG/$LBL/git.conf"
				#VER=$(grep -i "version:" "$specfile"|awk '{print $2}')
				#[[ -z "$URL" ]] && \
				#	URL="$GIT_URL/$GIT_USER/$prj_git" && \
				#	[[ G = ${GIT_ID:0:1} ]] && URL+=".git"
				tui-title "$URL"
				git clone "$URL" .
				;;
			sou)	tarballl="$(basename $downloadMode)"
			
				wget -O "$tarball" $(grep "$downloadMode" "$specfile"|awk '{print $2}')
				if echo "$tarball"|grep -q ".tar"
				then	tar -axf "$tarball"
				elif [[ "zip" = "${tarball:0:(-3)}" ]]
				then	unzip -uo "$tarball"
				else	tui-status 1 "Sorry cant handle $tarball yet!"
					exit 1
				fi
				[[ -f "$tarball" ]] && rm -fr "$tarball"
			esac
		fi
	fi	

	# Make the tarball
	cd "$prj_path/.."
	tui-tar "$prj_name"
	cp "$prj_name.tar.gz" "$DEST/SOURCES/$TARBALL"

	# Copy the patch files to the sources..
	$remoteOnly || cd "$prj_path"
	LIST=$(ls *patch 2>/dev/zero)
	[[ ! -z "$LIST" ]] && \
		for L in $LIST;do [[ -f "$L" ]] && tui-printf "Copy $L..." "$TUI_WORK";cp $LIST "$DEST/SOURCES";tui-status $? "Copied $L";done
	LIST=$(grep -i "source"[0-9]":" *spec|grep -v ^'#'|grep -i -v ^http|grep -v \{|awk '{print $2}')
	[[ ! -z "$LIST" ]] && \
		for L in $LIST;do [[ -f "$L" ]] && tui-printf "Copy $L..." "$TUI_WORK";cp $LIST "$DEST/SOURCES";tui-status $? "Copied $L";done
	
	# Execute the command
	cmd=
	cd "$prj_path"
	if $beVerbose
	then	rpmbuild $OPTS "$specfile"
		RET=$?
	else	echo "rpmbuild $OPTS $NONVERBOSE \"$specfile\" 1>>$TUI_LOG 2>>$TUI_LOG" > "$TUI_TEMP_FILE"
		tui-bgjob "$TUI_TEMP_FILE" "Building $prj_name package..." "Built $prj_name package."
		RET=$?
	fi
	
	# Increase build number if built was successfull
	[[ 0 -eq $RET ]] && \
		( increase_release ; tui-status $? "Updated releasenumber of $specfile") || \
		( tui-yesno "Do you want to see the $LOG for details?" && tui-edit "$LOG")
		
	# Optional task
	if $useFAS && [[ 0 -eq $RET ]]
	then	source $HOME/.config/fas/fas.conf
		DEST="$FAS_REVIEW/$prj_name"
		TMP="$TUI_TEMP_DIR/$prj_name.info"
		/usr/share/dev-scripts/menu/prj/rpm/list $LBL "$TMP"
		[[ -d "$DEST" ]] || mkdir -p "$DEST"
		cat "$TMP"|while read line;do
			[[ -f "$line" ]] && cp "$line" "$DEST"/
			tui-status $? "Copied to $DEST:" "$(basename $line)"
		done
		cp "$rpm_builddir/SOURCES/$TARBALL" "$DEST"
		tui-status $? "Copied to $DEST:" "$(basename $TARBALL)"
		cp "$specfile" "$DEST"
		tui-status $? "Copied to $DEST:" "$(basename $specfile)"
		rm -fr "$TMP"
	fi
	
	if $rpm_cleandir_after
	then 	rpmdev-wipetree 2>&1 1>/dev/zero
		tui-status $? "Cleaned $rpm_builddir"
	fi