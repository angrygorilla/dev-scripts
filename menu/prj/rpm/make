#!/bin/bash
# ------------------------------------------------------------------------
#
# Copyright (c) 2014-2015 by Simon Arjuna Erat (sea)  <erat.simon@gmail.com>
# All rights reserved.
#
# This program is free software: you can redistribute it and/or modify it
# under the terms of the GNU Lesser General Public License as published
# by the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>
#
# ------------------------------------------------------------------------
#
#	
	source /etc/tui/tui.conf
	source /etc/tui/commands.conf
	source /etc/tui/apps.conf || \
	[ 0 -eq $UID ] || \
		source $HOME/.config/tui/apps.conf
		
	script_version=0.8.3
#
#	Title
#
	title="$OA_TITLE - RPM Handler - Build package"
	tui-title "$title ($script_version)"
#
#	Variables
#
	case $# in
	5)	shift 3 ;;
	esac
	
	LOG=$LOG_RPM
	beVerbose=false
	NONVERBOSE="--quiet"
	doSource=false
	optVerb=""
	while getopts "vs" opts
	do 	case $opts in
		v)	beVerbose=true
			NONVERBOSE=""
			optVerb="-v"
			;;
		s)	doSource=true
			;;
		esac
	done
	shift $(($OPTIND - 1))
	
	if [ -z "$4" ] # || [ ! -z "$LBL" ]
	then	if [ -d "$DIR_CFG/$1" ]
		then	LBL="$1"
		else	tui-echo "Please select the label to work with:"
			LBL=$(tui-select $(cd "$DIR_CFG";ls|$GREP -v \.{cmd,info,help}))
		fi
	else	LBL="$4"
	fi
	
	source "$CONF_RPM"
	source "$DIR_CFG/$LBL/$LBL.conf"
	source "$DIR_CFG/$LBL/rpm.conf"
	touch "$TUI_TEMP_FILE"
	$doSource && opt=bs
	OPTS="-$opt"
	if [ -z "$specfile" ]
	then	specfile="$prj_path/$prj_name.spec"
		[ -f "$specfile" ] || specfile=$(tui-read "Please type the full path to the specfile:")
		
		# Save for later use
		if [ -f "$specfile" ]
		then	tui-conf-set "$DIR_CFG/$LBL/rpm.conf" specfile "$specfile"
		else	tui-status 1 "Cant work without a specfile!"
			exit $?
		fi
	fi
	VER=$($GREP Version "$specfile"|awk '{print $2}')
	TARBALL="$prj_name-$VER.$TAR_EXT"
	DEST="$rpm_builddir"
	[ -z "$rpm_cleandir" ] && rpm_cleandir=true
#
#	Functions
#
	increase_release() { #
	# Automaticly updates the release (build) number
	#
		rel=$($GREP -i "release:" "$specfile"|$AWK '{print $2}')
		num=${rel/\%*/}
		other=${rel/*\%/}
		num=$((num+1))
		$SED s,"$rel","$num%$other",g -i "$specfile"
		
	#	( IFS='%{}';rel=$(echo ${rel}|$AWK '{print $1}' ; export rel num other ))
		return $?
	}
#
#	Display
#
	tui-log -e "$LOG" ""
	tui-log -t "$LOG" "Loaded project: $prj_name ($LBL)"
	if $rpm_cleandir
	then	[ -d "$rpm_builddir" ] && rpmdev-wipetree 2>&1 1>/dev/zero
		tui-log $optVerb -t "$LOG" "Removed old builddir"
		tui-status $? "Cleaned $rpm_builddir"
	fi
	[ -d "$rpm_builddir" ] || ( rpmdev-setuptree ; tui-log $optVerb -t "$LOG" "Created new builddir" )
	ln -sf "$specfile" "$DEST/SPECS/${specfile##*/}"
	tui-log $optVerb -t "$LOG" "Linked $specfile to $DEST/SPECS/${specfile##*/}"
	
	# Prepare target directory
	if $remoteOnly
	then	newDest="$prj_path/$prj_name"
		tui-log $optVerb -t "$LOG" "Saving remote only project to $newDest"
	else	newDest="$DEST/SOURCES/"
	fi
	
	# Copy the patch and source files to the sources..
	cd "$prj_path"
	tui-log $optVerb -t "$LOG" "Changed from $OLDPWD to $PWD"
	LIST=$($GREP -i "patch"[0-9]":" "$specfile"|$GREP -v ^'#'|$GREP -i -v ^http|$GREP -v \{|awk '{print $2}')
	tui-log $optVerb -t "$LOG" "Found ${#LIST[@]} patch entries: ${LIST[@]}"
	[ -z "$LIST" ] || \
		for L in $LIST;do [ -f "$L" ] && tui-status -r 2 "Copy $L..." ;cp "$L" "$newDest/";tui-status $? "Copied to $newDest: $L";done
	
	LIST=$($GREP -i "source"[0-9]":" "$specfile"|$GREP -v ^'#'|$GREP -i -v ^http|$GREP -v \{|awk '{print $2}')
	tui-log $optVerb -t "$LOG" "Found ${#LIST[@]} source entries: ${LIST[@]}"
	[ ! -z "$LIST" ] && \
		for L in $LIST;do [ -f "$L" ] && tui-status -r 2 "Copy $L..." ;cp "$L" "$newDest/";tui-status $? "Copied to $newDest: $L";done
	
	# A little tweaking for the remoteOnly projects
	if $remoteOnly
	then	# Copy the required files also to SOURCES, so setting newDest back to original
		newDest="$DEST/SOURCES/"
		
		tui-status -r 2 "Generating list..."
		LIST=$($GREP -i "patch"[0-9]":" "$specfile"|$GREP -v ^'#'|$GREP -i -v ^http|$GREP -v \{|awk '{print $2}')
		[ -z "$LIST" ] || \
			for L in $LIST;do [ -f "$L" ] && tui-status -r 2 "Copy $L..." ;cp "$L" "$newDest/";tui-status $? "Copied to $newDest: $L";done

		LIST=$($GREP -i "source"[0-9]":" "$specfile"|$GREP -v ^'#'|$GREP -i -v ^http|$GREP -v \{|awk '{print $2}')
		[ ! -z "$LIST" ] && \
			for L in $LIST;do [ -f "$L" ] && tui-status -r 2 "Copy $L..." ;cp "$L" "$newDest/";tui-status $? "Copied to $newDest: $L";done
		# We are in $prj_path, and remote only projects are substored in $prj_name
	#	[ ! -z "$LIST" ] && \
	#		tui-log $optVerb -t "$LOG" "Generated remoteOnly LIST=$LIST"
		cd "$prj_name"
		#tui-log $optVerb -t "$LOG" "Changed from $OLDPWD (remoteOnly part) to $PWD"
	fi
	
	cd ..
	tui-log $optVerb -t "$LOG" "Changed from $OLDPWD to $PWD"
	
	# Make the tarball
	tui-tar "$prj_name"
	mv "$prj_name.$TAR_EXT" "$DEST/SOURCES/$TARBALL" && \
		msg="Moved $TARBALL to $DEST/SOURCES/$TARBALL" || \
		msg="Failed to move / Could not find: $TARBAL"
	tui-log $optVerb -t "$LOG" "$msg"
	# Execute the command
	cd "$prj_path"
	tui-log $optVerb -t "$LOG" "Changed from $OLDPWD to $PWD"
	if $beVerbose
	then	tui-log -vt "$LOG" "Start building verbose: rpmbuild $OPTS \"$specfile\""
		rpmbuild $OPTS "$specfile"
		RET=$?
	else	touch "$TUI_TEMP_FILE"
		echo "rpmbuild $OPTS $NONVERBOSE \"$specfile\" 1>>$LOG 2>>$LOG" > "$TUI_TEMP_FILE"
		tui-log $optVerb -t "$LOG" "Start building silent: rpmbuild $OPTS $NONVERBOSE \"$specfile\""
		tui-bgjob "$TUI_TEMP_FILE" "Building package: \"$prj_name\"..." "Built package: \"$prj_name\"."
		RET=$?
	fi
	[ 0 -eq $RET ] && \
		word="Successfull" || \
		word="Failed"
	tui-log $optVerb -t "$LOG" "Build end: $word"
	
	# Optional task (fas)
	if $useFAS && [ 0 -eq $RET ]
	then	source $HOME/.config/fas/fas.conf
		DEST="$FAS_REVIEW/$prj_name"
		tui-log $optVerb -t "$LOG" "FAS: Set output path: $DEST"
	else 	#echo "Here would be the default output target" > /dev/zero
		DEST="$DIR_OUT"
		tui-log $optVerb -t "$LOG" "Default: Use output path: $DEST"
	fi
	[ -d "$DEST" ] || mkdir -p "$DEST"
	tui-status $? "Found destination: $DEST" || exit
	
	TMP="$TUI_TEMP_DIR/$prj_name.info"
	tui-bol-dir "$TUI_TEMP_DIR" > /dev/zero
	touch "$TMP"
	/usr/share/dev-scripts/menu/prj/rpm/list $LBL "$TMP"
	#ds prj rpm list $LBL "$TMP"
	echo "" >> "$TMP"
	
	if $remoteOnly
	then	/usr/share/dev-scripts/menu/prj/rpm/list -s $LBL "$TMP"
		#ds prj rpm list $LBL "$TMP"
		# Just parse the source file
		cd $rpm_builddir
		. /etc/os-release
		cp "$(find|$GREP \.src\.rpm$ |$GREP fc$VERSION_ID)" "$DEST" || exit 1
		tui-log $optVerb -t "$LOG" "Start parsing: $TMP"
		for line in $(grep "src.rpm" "$TMP");do
			if [ ! -z "$line" ]
			then	[ ! "/" = "${line:0:1}" ] && line="/$line"
				[ -f "$line" ] && \
					lf="$(basename $line)" && \
						cp "$line" "$DEST"/ && \
						msg="Successfully copied" || \
						msg="Failed to copy"
				tui-status $? "* Copied" "$lf" 
				tui-log -t "$LOG" "$msg $DEST/$lf"
			fi
		done 
		cd "$OLDPWD"
		tui-log $optVerb -t "$LOG" "End parsing: $TMP"
	else	/usr/share/dev-scripts/menu/prj/rpm/list $LBL "$TMP"
		#ds prj rpm list $LBL "$TMP"
		echo "" >> "$TMP"
		# Copy all the files
		while read line;do ## for line in $(cat "$TMP");do
			if [ ! -z "$line" ]
			then	[ ! "/" = "${line:0:1}" ] && line="/$line"
				[ -f "$line" ] && \
					cp "$line" "$DEST"/ && \
						msg="Successfully copied" || \
						msg="Failed to copy"
				tui-status $? "* Copied" "$(basename $line)" 
				tui-log -t "$LOG" "$msg $(basename $line)"
			fi
		done <"$TMP"
	fi
	rm -fr "$TMP"
	
	
	cp "$rpm_builddir/SOURCES/$TARBALL" "$DEST"
	tui-status $? "* Copied" "$(basename $TARBALL)"
	cp "$specfile" "$DEST"
	tui-status $? "* Copied" "$(basename $specfile)"
	
	
	# Increase build number if built was successfull
	if [ 0 -eq $RET ]
	then	increase_release
		tui-status $? "Updated $specfile to build:" "Next: $($GREP -i "version:" "$specfile"|awk '{print $2}')-${num}"
	elif [ false = $beVerbose ]
	then	tui-yesno "Do you want to see the $LOG for details?" && tui-edit "$LOG"
	fi
	
	
	if [ $RET -eq 0 ] && $rpm_cleandir_after
	then 	rpmdev-wipetree 2>&1 1>/dev/zero
		tui-status $? "Cleaned $rpm_builddir"
	fi
	
	exit $RET