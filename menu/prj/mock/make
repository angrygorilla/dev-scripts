#!/usr/bin/env bash
# ------------------------------------------------------------------------
#
# Copyright (c) 2014-2015 by Simon Arjuna Erat (sea)  <erat.simon@gmail.com>
# All rights reserved.
#
# This program is free software: you can redistribute it and/or modify it
# under the terms of the GNU Lesser General Public License as published
# by the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>
#
# ------------------------------------------------------------------------
#
#	Variables
#
	. tuirc
	script_version=0.8
	TOTAL_RET=0
	TOTAL_COUNT=0
	TOTAL_SKIP=0
#
#	Title
#
	title="$OA_TITLE - Mock Handler - Build packages"
	tui-title "$title ($script_version)"
#
#	Variables
#
	case $# in
	5)	shift 3 ;;
	esac
	
	LOG=$LOG_MOCK
	beVerbose=false
	NONVERBOSE="--quiet"
	while getopts "vs" opts
	do 	case $opts in
		v)	beVerbose=true
			NONVERBOSE=""
			optVerb="-v"
			;;
		s)	dummy=$opts	;;
		esac
	done
	shift $(($OPTIND - 1))
	
	if [ -z "$4" ] # || [[ ! -z "$LBL" ]]
	then	if [[ -d "$DIR_CFG/$1" ]]
		then	LBL="$1"
		else	tui-echo "Please select the label to work with:"
			select LBL in $(cd "$DIR_CFG";ls|$GREP -v \.);do break;done
		fi
	else	LBL="$4"
	fi
	
	source "$CONF_RPM"
	source "$DIR_CFG/$LBL/$LBL.conf"
	if [ -f "$DIR_CFG/$LBL/rpm.conf" ]
	then	source "$DIR_CFG/$LBL/rpm.conf"
	else	tui-status 1 "Mock requires a specfile"
		exit 1
	fi
	source "$CONF_MOCK"
	source "$DIR_CFG/$LBL/mock.conf"
	TMP="$TUI_FILE_TEMP"
	touch "$TMP"
	OPTS="-$opt"
	tui-log -e "$LOG" ""
	tui-log -t "$LOG" "Loaded project: $prj_name ($LBL)"
	if [ -z "$specfile" ]
	then	specfile="$prj_path/$prj_name.spec"
		[ -f "$specfile" ] || specfile=$(tui-read "Please type the full path to the specfile:")
		
		# Save for later use
		if [ -f "$specfile" ]
		then	tui-conf-set "$DIR_CFG/$LBL/rpm.conf" specfile "$specfile"
		else	tui-status 1 "Cant work without a specfile!"
			exit $?
		fi
		tui-log $optVerb -t "$LOG" "Found specfile in $specfile"
	fi
	VER=$($GREP -i Version "$specfile"|$AWK '{print $2}')
	tui-log $optVerb -t "$LOG" "Specfile-Version: $VER"
#
#	Use the correct out path
#
	if $useFAS
	then	source $HOME/.config/fas/fas.conf
		dir_out="$FAS_REVIEW/$prj_name"
		specfile=$dir_out/$prj_name.spec
		tarball=$dir_out/$prj_name-$VER.$TAR_ET
	else	[ -z "$DIR_OUT" ] && \
			dir_out="$HOME/data/out/$dist" && \
			tui-conf-set \
				$HOME/.config/dev-scripts/dev-scripts.conf \
				DIR_OUT \
				"$(dirname $dir_out)"  || \
			dir_out="$DIR_OUT/$dist"
	fi
	tui-bol-dir -v "$dir_out"
#
#	Source RPM
#
	# Was built by 'rpm'
	# now looking for the latest...
	[ -z "$TUI_DIR_TEMP" ] && exit 1
	#list=$(find | $GREP -e $prj_name -e $VER | $GREP \.src\.rpm$)
	cd "$dir_out" && \
		list=$($LS -1tv *src.rpm|$GREP $VER) && \
		for l in $list;do s="$l";done && \
		SRC="$dir_out/$s"
tui-title "$SRC"
	tui-log $optVerb -t "$LOG" "Generated source rpm list (${#list[@]})"
	tui-log -t "$LOG" "list=$list"
	tui-log -vt "$LOG" "Start builds using: $SRC"
#
#	Mock builds all archs
#
	# Prepare tasks
	TASKS=""
	CHECK=0
	touch "$LOG_MOCK"
	umask 022 "$LOG_MOCK"
	for dist in $DISTROS;do
		for R in $RELEASES;do
			for A in $ARCHS;do
				T="$dist-$R-$A"
				if [ -f "/etc/mock/$T.cfg" ]
				then	TASKS+=" $prj_name-$T"
					echo "mock --target=$A -r $T $SRC 1>/dev/zero 2>>$LOG_MOCK " > "$TUI_DIR_TEMP/$prj_name-$T"
					#echo "[ 0 -eq \$? ] && msg=\"Successfully built\" || msg=\"Failed to build\"" >> "$TUI_DIR_TEMP/$prj_name-$T"
					#echo "tui-log -t \"$LOG\" \"\$msg $prj_name-$T\"" >> "$TUI_DIR_TEMP/$prj_name-$T"
					CHECK=$(($CHECK + 1))
				else	tui-print -rS 4 "Configuration for task \"$T\" does not exist."
					TOTAL_SKIP=$(( $TOTAL_SKIP + 1 ))
				fi
			done
		done
	done
	#TASKS=$(echo $TASKS)
	[ 0 -lt $TOTAL_SKIP ] && printf "\n"

	tui-header
	cd "$prj_path"
	cat > "$TMP" <<-EOF
	 	RET=0
	 	for T in \$TASKS;do
	 		echo "" >> \$LOG_MOCK
	 		cat "\$TUI_DIR_TEMP/$T" >> $LOG_MOCK
	 		tui-log -t "$LOG" "Start building package for \$T"
	 		sudo tui-bgjob "\$TUI_DIR_TEMP/$T" "Packaging \$T" "Packaged \$T" && \\
	 			rm "\$TUI_DIR_TEMP/\$T" && RET=\$((\$RET + 1))
	 		RET=\$?
	 		# 
	 		[ 0 -ne \$RET ] && \
	 			TOTAL_RET=\$(( \$TOTAL_RET + 1 )) && \\
	 				msg="Successfully built" || \\
	 				msg="Failed to build"
	 		tui-log $optVerb -t "$LOG" "\$msg: \$prj_name-\$T"
	 		
	 		TOTAL_COUNT=\$(( \$TOTAL_COUNT + 1 ))
	 	done
	 	echo "$TOTAL_COUNT" > "$TMP.2"
	EOF
	tui-asroot "sh $TMP"
	TOTAL_COUNT=$(<$TMP.2)
#	else	# REQUIRES ROOT, NO SUDO AVAILABLE
#		cat > $TUI_FILE_TEMP << EOF
#for T in $TASKS;do
#	cat $TUI_DIR_TEMP/\$T >> $LOG_MOCK
#	tui-bgjob "\$TUI_DIR_TEMP/\$T" "Packaging \$T" "Packaged \$T" && rm $TUI_DIR_TEMP/\$T
#	[ 0 -ne \$? ] && \\
#			TOTAL_RET=$(( \$TOTAL_RET + 1 )) && \\
#			tui-filemgr /var/lib/mock/\$T/result
#	TOTAL_COUNT=$(( \$TOTAL_COUNT + 1 ))
#done
#export TOTAL_RET TOTAL_COUNT
#EOF
	#	tui-echo "Please provide root password:"
	#	su -c "sh $TUI_FILE_TEMP ; echo \$? > $TUI_FILE_TEMP"
	#	RET=$(cat $TUI_FILE_TEMP)
	#fi
#
#	Moving files
#
	tui-header
	cd /var/lib/mock
	tui-log $optVerb -t "$LOG" "Changed from $OLDPWD to $PWD"
	tui-echo
	#tui-echo "Moving files??"
	
	echo "find| $GREP  "\\."rpm\$|$GREP -v root |$GREP -v debuginfo 2>/dev/zero >$TMP.2" > "$TMP"
	tui-asroot "sh $TMP"
	cat "$TMP.2" > "$TMP"
	#tui-title
	#	su -c "list=$(find| $GREP  \\\\.rpm\\$|$GREP -v root|$GREP -v debuginfo);export list"
	#fi
	tui-log $optVerb -t "$LOG" "Generated list of files to move"
	# OLD
		# result|grep -v debug |grep [46h]"\.rpm" 2>/dev/zero )  2>/dev/zero
	if [ ! -z "$list" ]
	then	# Shorten the list
		LIST=""
		for l in $list;do
			echo "$LIST" | grep -q "$l" || \
				LIST+=" $l"
		done
		
		# list variable is NOT empty
		tui-log -t "$LOG" "RAW: $list"
		tui-log -t "$LOG" "Short: $LIST"
		
		if [ -n "$LIST" ]
		then	tui-asroot "chown -R $USER:$USER $LIST"
			RET=$?
		fi
		tui-status $RET "Chowned packages."
		
		tui-echo
		tui-echo "Moving packages to $dir_out:"
		tui-log $optVerb "$LOG" "Set outputdir: $dir_out"
		for F in $LIST;do
			tui-print -rS 2 " * Moving: $(basename $F)"
			#mv -f "$F" "$dir_out"
			mv "$F" "$dir_out"
			tui-status $? " * Moved: $(basename $F)" && \
				msg="Successfully moved" || \
				msg="Failed to move"
			tui-log $optVerb -t "$LOG" "$msg $(basename $F)"
		done
	else	tui-log -t "$LOG" "List is empty / Nothing found"
	fi
#
#	Check return value
#
	#tui-echo "Options available:" "$CHECK"
	#tui-echo "Configurations skipped:" "$(( $CHECK - $TOTAL_COUNT ))"
	tui-echo
	msg="There where $CHECK configuration files found and $TOTAL_SKIP entries were skipped."
	tui-log -v -t "$LOG" "$msg"
	
	if [ $TOTAL_RET -ne 0 ] #tui-status $RET "Made all packages of: $prj_name"
	then	tui-log -v -t "$LOG" "Sadly, a total of $TOTAL_RET packages failed."
		tui-log -e "$LOG" ""
		tui-yesno "View logfile?" && tui-edit "$LOG_MOCK"
		#exit 1
	#else	tui-status $TOTAL_RET ""
	fi
	
	[ $TOTAL_RET -gt 0 ] && RET=1  || RET=0
	exit $RET